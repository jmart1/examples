/*
 * This file is generated by jOOQ.
 */
package com.github.jmart1.example.repo.website.model.tables;


import com.github.jmart1.example.repo.website.model.Pacnode;
import com.github.jmart1.example.repo.website.model.tables.records.AdminUsersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AdminUsers extends TableImpl<AdminUsersRecord> {

    /**
     * The reference instance of <code>pacnode.admin_users</code>
     */
    public static final AdminUsers ADMIN_USERS = new AdminUsers();
    private static final long serialVersionUID = -2061227355;
    /**
     * The column <code>pacnode.admin_users.username</code>.
     */
    public final TableField<AdminUsersRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");
    /**
     * The column <code>pacnode.admin_users.secret_code</code>.
     */
    public final TableField<AdminUsersRecord, String> SECRET_CODE = createField("secret_code", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.admin_users.password</code>.
     */
    public final TableField<AdminUsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>pacnode.admin_users</code> table reference
     */
    public AdminUsers() {
        this(DSL.name("admin_users"), null);
    }

    /**
     * Create an aliased <code>pacnode.admin_users</code> table reference
     */
    public AdminUsers(String alias) {
        this(DSL.name(alias), ADMIN_USERS);
    }

    /**
     * Create an aliased <code>pacnode.admin_users</code> table reference
     */
    public AdminUsers(Name alias) {
        this(alias, ADMIN_USERS);
    }

    private AdminUsers(Name alias, Table<AdminUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminUsers(Name alias, Table<AdminUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminUsersRecord> getRecordType() {
        return AdminUsersRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pacnode.PACNODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUsers as(String alias) {
        return new AdminUsers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUsers as(Name alias) {
        return new AdminUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUsers rename(String name) {
        return new AdminUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUsers rename(Name name) {
        return new AdminUsers(name, null);
    }
}
