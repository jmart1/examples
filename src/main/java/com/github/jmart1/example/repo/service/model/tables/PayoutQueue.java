/*
 * This file is generated by jOOQ.
 */
package com.github.jmart1.example.repo.service.model.tables;


import com.github.jmart1.example.repo.service.model.enums.PayoutQueueStatus;
import com.github.jmart1.example.repo.service.model.tables.records.PayoutQueueRecord;
import com.github.jmart1.example.repo.service.model.Indexes;
import com.github.jmart1.example.repo.service.model.Keys;
import com.github.jmart1.example.repo.service.model.Pacnode;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PayoutQueue extends TableImpl<PayoutQueueRecord> {

    /**
     * The reference instance of <code>pacnode.payout_queue</code>
     */
    public static final PayoutQueue PAYOUT_QUEUE = new PayoutQueue();
    private static final long serialVersionUID = 1318585985;
    /**
     * The column <code>pacnode.payout_queue.payout_id</code>.
     */
    public final TableField<PayoutQueueRecord, Integer> PAYOUT_ID = createField("payout_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>pacnode.payout_queue.status</code>.
     */
    public final TableField<PayoutQueueRecord, PayoutQueueStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.inline("PENDING", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(PayoutQueueStatus.class), this, "");
    /**
     * The column <code>pacnode.payout_queue.confirmations</code>.
     */
    public final TableField<PayoutQueueRecord, Integer> CONFIRMATIONS = createField("confirmations", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>pacnode.payout_queue.payout_address</code>.
     */
    public final TableField<PayoutQueueRecord, String> PAYOUT_ADDRESS = createField("payout_address", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");
    /**
     * The column <code>pacnode.payout_queue.payout_amount</code>.
     */
    public final TableField<PayoutQueueRecord, BigDecimal> PAYOUT_AMOUNT = createField("payout_amount", org.jooq.impl.SQLDataType.DECIMAL(42, 10), this, "");
    /**
     * The column <code>pacnode.payout_queue.payout_datetime</code>.
     */
    public final TableField<PayoutQueueRecord, Timestamp> PAYOUT_DATETIME = createField("payout_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
    /**
     * The column <code>pacnode.payout_queue.send_datetime</code>.
     */
    public final TableField<PayoutQueueRecord, Timestamp> SEND_DATETIME = createField("send_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
    /**
     * The column <code>pacnode.payout_queue.transaction_id</code>.
     */
    public final TableField<PayoutQueueRecord, String> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.VARCHAR(125), this, "");
    /**
     * The column <code>pacnode.payout_queue.coin</code>.
     */
    public final TableField<PayoutQueueRecord, String> COIN = createField("coin", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.payout_queue.authorized</code>.
     */
    public final TableField<PayoutQueueRecord, Byte> AUTHORIZED = createField("authorized", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");
    /**
     * The column <code>pacnode.payout_queue.created</code>.
     */
    public final TableField<PayoutQueueRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
    /**
     * The column <code>pacnode.payout_queue.modified</code>.
     */
    public final TableField<PayoutQueueRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>pacnode.payout_queue</code> table reference
     */
    public PayoutQueue() {
        this(DSL.name("payout_queue"), null);
    }

    /**
     * Create an aliased <code>pacnode.payout_queue</code> table reference
     */
    public PayoutQueue(String alias) {
        this(DSL.name(alias), PAYOUT_QUEUE);
    }

    /**
     * Create an aliased <code>pacnode.payout_queue</code> table reference
     */
    public PayoutQueue(Name alias) {
        this(alias, PAYOUT_QUEUE);
    }

    private PayoutQueue(Name alias, Table<PayoutQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayoutQueue(Name alias, Table<PayoutQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayoutQueueRecord> getRecordType() {
        return PayoutQueueRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pacnode.PACNODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYOUT_QUEUE_PRIMARY, Indexes.PAYOUT_QUEUE_QUEUE_PAYOUT_ADDRESS_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PayoutQueueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAYOUT_QUEUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PayoutQueueRecord> getPrimaryKey() {
        return Keys.KEY_PAYOUT_QUEUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PayoutQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<PayoutQueueRecord>>asList(Keys.KEY_PAYOUT_QUEUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PayoutQueue as(String alias) {
        return new PayoutQueue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PayoutQueue as(Name alias) {
        return new PayoutQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayoutQueue rename(String name) {
        return new PayoutQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayoutQueue rename(Name name) {
        return new PayoutQueue(name, null);
    }
}
