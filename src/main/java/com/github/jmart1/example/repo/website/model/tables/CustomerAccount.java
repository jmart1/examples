/*
 * This file is generated by jOOQ.
 */
package com.github.jmart1.example.repo.website.model.tables;


import com.github.jmart1.example.repo.website.model.Indexes;
import com.github.jmart1.example.repo.website.model.Keys;
import com.github.jmart1.example.repo.website.model.Pacnode;
import com.github.jmart1.example.repo.website.model.tables.records.CustomerAccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CustomerAccount extends TableImpl<CustomerAccountRecord> {

    /**
     * The reference instance of <code>pacnode.customer_account</code>
     */
    public static final CustomerAccount CUSTOMER_ACCOUNT = new CustomerAccount();
    private static final long serialVersionUID = -1160046262;
    /**
     * The column <code>pacnode.customer_account.uuid</code>.
     */
    public final TableField<CustomerAccountRecord, Integer> UUID = createField("uuid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>pacnode.customer_account.account_id</code>.
     */
    public final TableField<CustomerAccountRecord, String> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.customer_account.username</code>.
     */
    public final TableField<CustomerAccountRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.customer_account.referred_by</code>.
     */
    public final TableField<CustomerAccountRecord, String> REFERRED_BY = createField("referred_by", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.customer_account.original_investment</code>.
     */
    public final TableField<CustomerAccountRecord, Integer> ORIGINAL_INVESTMENT = createField("original_investment", org.jooq.impl.SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pacnode.customer_account.total_paid_out</code>.
     */
    public final TableField<CustomerAccountRecord, Integer> TOTAL_PAID_OUT = createField("total_paid_out", org.jooq.impl.SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pacnode.customer_account.payout_address</code>.
     */
    public final TableField<CustomerAccountRecord, String> PAYOUT_ADDRESS = createField("payout_address", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.customer_account.invest_address</code>.
     */
    public final TableField<CustomerAccountRecord, String> INVEST_ADDRESS = createField("invest_address", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");
    /**
     * The column <code>pacnode.customer_account.withdrawed</code>.
     */
    public final TableField<CustomerAccountRecord, Byte> WITHDRAWED = createField("withdrawed", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>pacnode.customer_account</code> table reference
     */
    public CustomerAccount() {
        this(DSL.name("customer_account"), null);
    }

    /**
     * Create an aliased <code>pacnode.customer_account</code> table reference
     */
    public CustomerAccount(String alias) {
        this(DSL.name(alias), CUSTOMER_ACCOUNT);
    }

    /**
     * Create an aliased <code>pacnode.customer_account</code> table reference
     */
    public CustomerAccount(Name alias) {
        this(alias, CUSTOMER_ACCOUNT);
    }

    private CustomerAccount(Name alias, Table<CustomerAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerAccount(Name alias, Table<CustomerAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerAccountRecord> getRecordType() {
        return CustomerAccountRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pacnode.PACNODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_ACCOUNT_CUST_ID, Indexes.CUSTOMER_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CustomerAccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMER_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CustomerAccountRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CustomerAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerAccountRecord>>asList(Keys.KEY_CUSTOMER_ACCOUNT_PRIMARY, Keys.KEY_CUSTOMER_ACCOUNT_CUST_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomerAccount as(String alias) {
        return new CustomerAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomerAccount as(Name alias) {
        return new CustomerAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerAccount rename(String name) {
        return new CustomerAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerAccount rename(Name name) {
        return new CustomerAccount(name, null);
    }
}
