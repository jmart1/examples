/*
 * This file is generated by jOOQ.
 */
package com.github.jmart1.example.repo.service.model.tables;


import com.github.jmart1.example.repo.service.model.Indexes;
import com.github.jmart1.example.repo.service.model.tables.records.CoinUsdPricesRecord;
import com.github.jmart1.example.repo.service.model.Keys;
import com.github.jmart1.example.repo.service.model.Pacnode;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CoinUsdPrices extends TableImpl<CoinUsdPricesRecord> {

    private static final long serialVersionUID = 261091664;

    /**
     * The reference instance of <code>pacnode.coin_usd_prices</code>
     */
    public static final CoinUsdPrices COIN_USD_PRICES = new CoinUsdPrices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoinUsdPricesRecord> getRecordType() {
        return CoinUsdPricesRecord.class;
    }

    /**
     * The column <code>pacnode.coin_usd_prices.date</code>.
     */
    public final TableField<CoinUsdPricesRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.open</code>.
     */
    public final TableField<CoinUsdPricesRecord, BigDecimal> OPEN = createField("open", org.jooq.impl.SQLDataType.DECIMAL(42, 10).nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.high</code>.
     */
    public final TableField<CoinUsdPricesRecord, BigDecimal> HIGH = createField("high", org.jooq.impl.SQLDataType.DECIMAL(42, 10).nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.low</code>.
     */
    public final TableField<CoinUsdPricesRecord, BigDecimal> LOW = createField("low", org.jooq.impl.SQLDataType.DECIMAL(42, 10).nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.close</code>.
     */
    public final TableField<CoinUsdPricesRecord, BigDecimal> CLOSE = createField("close", org.jooq.impl.SQLDataType.DECIMAL(42, 10).nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.average_value</code>.
     */
    public final TableField<CoinUsdPricesRecord, BigDecimal> AVERAGE_VALUE = createField("average_value", org.jooq.impl.SQLDataType.DECIMAL(42, 10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0000000000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.volume</code>.
     */
    public final TableField<CoinUsdPricesRecord, Long> VOLUME = createField("volume", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.market_cap</code>.
     */
    public final TableField<CoinUsdPricesRecord, Long> MARKET_CAP = createField("market_cap", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pacnode.coin_usd_prices.coin_name</code>.
     */
    public final TableField<CoinUsdPricesRecord, String> COIN_NAME = createField("coin_name", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * Create a <code>pacnode.coin_usd_prices</code> table reference
     */
    public CoinUsdPrices() {
        this(DSL.name("coin_usd_prices"), null);
    }

    /**
     * Create an aliased <code>pacnode.coin_usd_prices</code> table reference
     */
    public CoinUsdPrices(String alias) {
        this(DSL.name(alias), COIN_USD_PRICES);
    }

    /**
     * Create an aliased <code>pacnode.coin_usd_prices</code> table reference
     */
    public CoinUsdPrices(Name alias) {
        this(alias, COIN_USD_PRICES);
    }

    private CoinUsdPrices(Name alias, Table<CoinUsdPricesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoinUsdPrices(Name alias, Table<CoinUsdPricesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pacnode.PACNODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COIN_USD_PRICES_COIN_NAME, Indexes.COIN_USD_PRICES_DATE, Indexes.COIN_USD_PRICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CoinUsdPricesRecord> getPrimaryKey() {
        return Keys.KEY_COIN_USD_PRICES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CoinUsdPricesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoinUsdPricesRecord>>asList(Keys.KEY_COIN_USD_PRICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CoinUsdPrices as(String alias) {
        return new CoinUsdPrices(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CoinUsdPrices as(Name alias) {
        return new CoinUsdPrices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoinUsdPrices rename(String name) {
        return new CoinUsdPrices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoinUsdPrices rename(Name name) {
        return new CoinUsdPrices(name, null);
    }
}
